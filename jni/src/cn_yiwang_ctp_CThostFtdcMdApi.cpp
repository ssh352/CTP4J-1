/* DO NOT EDIT THIS FILE - it is machine generated */
#include "windows.h"
#include "jni.h"
#include "ThostFtdcMdApi.h"
#include "MdSpi.h"

/* Header for class cn_yiwang_ctp_CThostFtdcMdApi */

#ifndef _Included_cn_yiwang_ctp_CThostFtdcMdApi
#define _Included_cn_yiwang_ctp_CThostFtdcMdApi
#ifdef __cplusplus
extern "C" {
#endif

	CThostFtdcMdApi* pMdApi;

	JavaVM *md_jvm;
	//JNIEnv *g_env;
	jobject md_obj;

	//std::ofstream file;

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    createFtdcMdApi
	 * Signature: ()Lcn/yiwang/ctp/CThostFtdcMdApi;
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_createFtdcMdApi__
		(JNIEnv *jenv, jobject jobj) {
		pMdApi = CThostFtdcMdApi::CreateFtdcMdApi();
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    createFtdcMdApi
	 * Signature: (Ljava/lang/String;)Lcn/yiwang/ctp/CThostFtdcMdApi;
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_createFtdcMdApi__Ljava_lang_String_2
		(JNIEnv *jenv, jobject jobj, jstring flowPath) {
		const char *pszFlowPath;
		pszFlowPath = jenv->GetStringUTFChars(flowPath, NULL);
		pMdApi = CThostFtdcMdApi::CreateFtdcMdApi(pszFlowPath);
		jenv->ReleaseStringUTFChars(flowPath, pszFlowPath);
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    getApiVersion
	 * Signature: ()Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_getApiVersion
		(JNIEnv *jenv, jobject jobj) {
		jstring version = NULL;
		if (pMdApi) {
			version = jenv->NewStringUTF(pMdApi->GetApiVersion());
		}
		return version;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    release
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_release
		(JNIEnv *, jobject) {
		if (pMdApi) {
			pMdApi->Release();
			pMdApi = NULL;
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    init
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_init
		(JNIEnv *, jobject) {
		if (pMdApi) {
			pMdApi->Init();
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    join
	 * Signature: ()I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_join
		(JNIEnv *, jobject) {
		if (pMdApi) {
			return pMdApi->Join();
		}
		else {
			return 0;
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    getTradingDay
	 * Signature: ()Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_getTradingDay
		(JNIEnv *jenv, jobject jobj) {
		jstring tradingDay = NULL;
		if (pMdApi) {
			tradingDay = jenv->NewStringUTF(pMdApi->GetTradingDay());
		}
		return tradingDay;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    registerFront
	 * Signature: (Ljava/lang/String;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_registerFront
		(JNIEnv *jenv, jobject jobj, jstring frontAddress) {
		if (pMdApi) {
			const char *pszFrontAddress;
			pszFrontAddress = jenv->GetStringUTFChars(frontAddress, NULL);
			pMdApi->RegisterFront(const_cast<char*>(pszFrontAddress));
			jenv->ReleaseStringUTFChars(frontAddress, pszFrontAddress);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    registerNameServer
	 * Signature: (Ljava/lang/String;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_registerNameServer
		(JNIEnv *jenv, jobject jobj, jstring nsAddress) {
		if (pMdApi) {
			const char *pszNsAddress;
			pszNsAddress = jenv->GetStringUTFChars(nsAddress, NULL);
			pMdApi->RegisterNameServer(const_cast<char*>(pszNsAddress));
			jenv->ReleaseStringUTFChars(nsAddress, pszNsAddress);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    registerFensUserInfo
	 * Signature: (Lcn/yiwang/ctp/struct/CThostFtdcFensUserInfoField;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_registerFensUserInfo
		(JNIEnv *jenv, jobject jobj, jobject jUserInfo) {
		if (pMdApi) {
			jclass jcls = jenv->GetObjectClass(jUserInfo);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID LoginMode_fid = jenv->GetFieldID(jcls, "LoginMode", "C");

			CThostFtdcFensUserInfoField fensUserInfo;
			memset(&fensUserInfo, 0, sizeof(fensUserInfo));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jUserInfo, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(fensUserInfo.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jUserInfo, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(fensUserInfo.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (LoginMode_fid != NULL) {
				fensUserInfo.LoginMode = jenv->GetIntField(jUserInfo, LoginMode_fid);
			}

			pMdApi->RegisterFensUserInfo(&fensUserInfo);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    registerSpi
	 * Signature: (Lcn/yiwang/ctp/CThostFtdcMdSpi;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_registerSpi
		(JNIEnv *jenv, jobject jobj, jobject spi) {
		if (pMdApi) {
			jenv->GetJavaVM(&md_jvm);
			md_obj = jenv->NewGlobalRef(spi);

			CtpMdSpi *pSpi = new CtpMdSpi(md_jvm, md_obj);
			pMdApi->RegisterSpi(pSpi);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    subscribeMarketData
	 * Signature: ([Ljava/lang/String;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_subscribeMarketData
		(JNIEnv *jenv, jobject jobj, jobjectArray jInstrumentID, jint jCount) {
		int ret = 0;
		if (pMdApi) {
			char **ppInstrumentID = NULL;
			if (jInstrumentID != NULL) {
				jsize len = jenv->GetArrayLength(jInstrumentID);
				if (len > jCount) {
					len = jCount;
				}
				jstring InstrumentID_jstr = NULL;
				const char *InstrumentID_chr = "";

				ppInstrumentID = (char **)calloc(jCount, sizeof(char*));
				for (int i = 0; i < len; i++) {
					InstrumentID_jstr = (jstring)jenv->GetObjectArrayElement(jInstrumentID, i);
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					ppInstrumentID[i] = const_cast<char *>(InstrumentID_chr);
				}
				jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
			}
			ret = pMdApi->SubscribeMarketData(ppInstrumentID, jCount);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    unSubscribeMarketData
	 * Signature: ([Ljava/lang/String;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_unSubscribeMarketData
		(JNIEnv *jenv, jobject jobj, jobjectArray jInstrumentID, jint jCount) {
		int ret = 0;
		if (pMdApi) {
			char **ppInstrumentID = NULL;
			if (jInstrumentID != NULL) {
				jsize len = jenv->GetArrayLength(jInstrumentID);
				if (len > jCount) {
					len = jCount;
				}
				jstring InstrumentID_jstr = NULL;
				const char *InstrumentID_chr = "";

				ppInstrumentID = (char **)calloc(jCount, sizeof(char*));
				for (int i = 0; i < len; i++) {
					InstrumentID_jstr = (jstring)jenv->GetObjectArrayElement(jInstrumentID, i);
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					ppInstrumentID[i] = const_cast<char *>(InstrumentID_chr);
				}
				jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
			}
			ret = pMdApi->UnSubscribeMarketData(ppInstrumentID, jCount);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    subscribeForQuoteRsp
	 * Signature: ([Ljava/lang/String;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_subscribeForQuoteRsp
		(JNIEnv *jenv, jobject jobj, jobjectArray jInstrumentID, jint jCount) {
		int ret = 0;
		if (pMdApi) {
			char **ppInstrumentID = NULL;
			if (jInstrumentID != NULL) {
				jsize len = jenv->GetArrayLength(jInstrumentID);
				if (len > jCount) {
					len = jCount;
				}
				jstring InstrumentID_jstr = NULL;
				const char *InstrumentID_chr = "";

				ppInstrumentID = (char **)calloc(jCount, sizeof(char*));
				for (int i = 0; i < len; i++) {
					InstrumentID_jstr = (jstring)jenv->GetObjectArrayElement(jInstrumentID, i);
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					ppInstrumentID[i] = const_cast<char *>(InstrumentID_chr);
				}
				jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
			}
			ret = pMdApi->SubscribeForQuoteRsp(ppInstrumentID, jCount);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    unSubscribeForQuoteRsp
	 * Signature: ([Ljava/lang/String;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_unSubscribeForQuoteRsp
		(JNIEnv *jenv, jobject jobj, jobjectArray jInstrumentID, jint jCount) {
		int ret = 0;
		if (pMdApi) {
			char **ppInstrumentID = NULL;
			if (jInstrumentID != NULL) {
				jsize len = jenv->GetArrayLength(jInstrumentID);
				if (len > jCount) {
					len = jCount;
				}
				jstring InstrumentID_jstr = NULL;
				const char *InstrumentID_chr = "";

				ppInstrumentID = (char **)calloc(jCount, sizeof(char*));
				for (int i = 0; i < len; i++) {
					InstrumentID_jstr = (jstring)jenv->GetObjectArrayElement(jInstrumentID, i);
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					ppInstrumentID[i] = const_cast<char *>(InstrumentID_chr);
				}
				jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
			}
			ret = pMdApi->UnSubscribeForQuoteRsp(ppInstrumentID, jCount);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    reqUserLogin
	 * Signature: (Lcn/yiwang/ctp/struct/CThostFtdcReqUserLoginField;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_reqUserLogin
		(JNIEnv *jenv, jobject jobj, jobject jReqUserLogin, jint jRequestID) {
		int ret = 0;
		if (pMdApi) {
			jclass jcls = jenv->GetObjectClass(jReqUserLogin);

			jfieldID TradingDay_fid = jenv->GetFieldID(jcls, "TradingDay", "Ljava/lang/String;");
			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID Password_fid = jenv->GetFieldID(jcls, "Password", "Ljava/lang/String;");
			jfieldID UserProductInfo_fid = jenv->GetFieldID(jcls, "UserProductInfo", "Ljava/lang/String;");
			jfieldID InterfaceProductInfo_fid = jenv->GetFieldID(jcls, "InterfaceProductInfo", "Ljava/lang/String;");
			jfieldID ProtocolInfo_fid = jenv->GetFieldID(jcls, "ProtocolInfo", "Ljava/lang/String;");
			jfieldID MacAddress_fid = jenv->GetFieldID(jcls, "MacAddress", "Ljava/lang/String;");
			jfieldID OneTimePassword_fid = jenv->GetFieldID(jcls, "OneTimePassword", "Ljava/lang/String;");
			jfieldID ClientIPAddress_fid = jenv->GetFieldID(jcls, "ClientIPAddress", "Ljava/lang/String;");


			CThostFtdcReqUserLoginField reqUserLogin;
			memset(&reqUserLogin, 0, sizeof(reqUserLogin));

			if (TradingDay_fid != NULL) {
				jstring TradingDay_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, TradingDay_fid);
				const char *TradingDay_chr = "";
				if (TradingDay_jstr != NULL) {
					TradingDay_chr = jenv->GetStringUTFChars(TradingDay_jstr, NULL);
					strcpy_s(reqUserLogin.TradingDay, TradingDay_chr);
					jenv->ReleaseStringUTFChars(TradingDay_jstr, TradingDay_chr);
				}
			}

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(reqUserLogin.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(reqUserLogin.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (Password_fid != NULL) {
				jstring Password_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, Password_fid);
				const char *Password_chr = "";
				if (Password_jstr != NULL) {
					Password_chr = jenv->GetStringUTFChars(Password_jstr, NULL);
					strcpy_s(reqUserLogin.Password, Password_chr);
					jenv->ReleaseStringUTFChars(Password_jstr, Password_chr);
				}
			}

			if (UserProductInfo_fid != NULL) {
				jstring UserProductInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, UserProductInfo_fid);
				const char *UserProductInfo_chr = "";
				if (UserProductInfo_jstr != NULL) {
					UserProductInfo_chr = jenv->GetStringUTFChars(UserProductInfo_jstr, NULL);
					strcpy_s(reqUserLogin.UserProductInfo, UserProductInfo_chr);
					jenv->ReleaseStringUTFChars(UserProductInfo_jstr, UserProductInfo_chr);
				}
			}

			if (InterfaceProductInfo_fid != NULL) {
				jstring InterfaceProductInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, InterfaceProductInfo_fid);
				const char *InterfaceProductInfo_chr = "";
				if (InterfaceProductInfo_jstr != NULL) {
					InterfaceProductInfo_chr = jenv->GetStringUTFChars(InterfaceProductInfo_jstr, NULL);
					strcpy_s(reqUserLogin.InterfaceProductInfo, InterfaceProductInfo_chr);
					jenv->ReleaseStringUTFChars(InterfaceProductInfo_jstr, InterfaceProductInfo_chr);
				}
			}

			if (ProtocolInfo_fid != NULL) {
				jstring ProtocolInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, ProtocolInfo_fid);
				const char *ProtocolInfo_chr = "";
				if (ProtocolInfo_jstr != NULL) {
					ProtocolInfo_chr = jenv->GetStringUTFChars(ProtocolInfo_jstr, NULL);
					strcpy_s(reqUserLogin.ProtocolInfo, ProtocolInfo_chr);
					jenv->ReleaseStringUTFChars(ProtocolInfo_jstr, ProtocolInfo_chr);
				}
			}

			if (MacAddress_fid != NULL) {
				jstring MacAddress_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, MacAddress_fid);
				const char *MacAddress_chr = "";
				if (MacAddress_jstr != NULL) {
					MacAddress_chr = jenv->GetStringUTFChars(MacAddress_jstr, NULL);
					strcpy_s(reqUserLogin.MacAddress, MacAddress_chr);
					jenv->ReleaseStringUTFChars(MacAddress_jstr, MacAddress_chr);
				}
			}

			if (OneTimePassword_fid != NULL) {
				jstring OneTimePassword_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, OneTimePassword_fid);
				const char *OneTimePassword_chr = "";
				if (OneTimePassword_jstr != NULL) {
					OneTimePassword_chr = jenv->GetStringUTFChars(OneTimePassword_jstr, NULL);
					strcpy_s(reqUserLogin.OneTimePassword, OneTimePassword_chr);
					jenv->ReleaseStringUTFChars(OneTimePassword_jstr, OneTimePassword_chr);
				}
			}

			if (ClientIPAddress_fid != NULL) {
				jstring ClientIPAddress_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, ClientIPAddress_fid);
				const char *ClientIPAddress_chr = "";
				if (ClientIPAddress_jstr != NULL) {
					ClientIPAddress_chr = jenv->GetStringUTFChars(ClientIPAddress_jstr, NULL);
					strcpy_s(reqUserLogin.ClientIPAddress, ClientIPAddress_chr);
					jenv->ReleaseStringUTFChars(ClientIPAddress_jstr, ClientIPAddress_chr);
				}
			}

			ret = pMdApi->ReqUserLogin(&reqUserLogin, jRequestID);
			//file.open("log.log", std::iostream::app);
			//file << "jRequestID:" << jRequestID  << std::endl;
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcMdApi
	 * Method:    reqUserLogout
	 * Signature: (Lcn/yiwang/ctp/struct/CThostFtdcUserLogoutField;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcMdApi_reqUserLogout
		(JNIEnv *jenv, jobject jobj, jobject jUserLogout, jint jRequestID) {
		int ret = 0;
		if (pMdApi) {
			jclass jcls = jenv->GetObjectClass(jUserLogout);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			
			CThostFtdcUserLogoutField reqUserLogout;
			memset(&reqUserLogout, 0, sizeof(reqUserLogout));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jUserLogout, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(reqUserLogout.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jUserLogout, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(reqUserLogout.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			ret = pMdApi->ReqUserLogout(&reqUserLogout, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}



#ifdef __cplusplus
}
#endif
#endif
