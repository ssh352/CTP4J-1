/* DO NOT EDIT THIS FILE - it is machine generated */
#include "windows.h"
#include "jni.h"
#include "ThostFtdcTraderApi.h"
#include "TraderSpi.h"

/* Header for class cn_yiwang_ctp_CThostFtdcTraderApi */

#ifndef _Included_cn_yiwang_ctp_CThostFtdcTraderApi
#define _Included_cn_yiwang_ctp_CThostFtdcTraderApi
#ifdef __cplusplus
extern "C" {
#endif

	CThostFtdcTraderApi* pTraderApi;
	CtpTraderSpi* pSpi;
	JavaVM *trader_jvm;
	jobject trader_obj;

	//std::ofstream file;

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    createFtdcTraderApi
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_createFtdcTraderApi__
		(JNIEnv *, jobject) {
		pTraderApi = CThostFtdcTraderApi::CreateFtdcTraderApi();
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    createFtdcTraderApi
	 * Signature: (Ljava/lang/String;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_createFtdcTraderApi__Ljava_lang_String_2
		(JNIEnv *jenv, jobject jobj, jstring flowPath) {
		const char *pszFlowPath;
		pszFlowPath = jenv->GetStringUTFChars(flowPath, NULL);
		pTraderApi = CThostFtdcTraderApi::CreateFtdcTraderApi(pszFlowPath);
		jenv->ReleaseStringUTFChars(flowPath, pszFlowPath);
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    getApiVersion
	 * Signature: ()Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_getApiVersion
		(JNIEnv *jenv, jobject jobj) {
		jstring version = NULL;
		if (pTraderApi) {
			version = jenv->NewStringUTF(pTraderApi->GetApiVersion());
		}
		return version;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    release
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_release
		(JNIEnv *, jobject) {
		if (pTraderApi) {
			pTraderApi->Release();
			pTraderApi = NULL;
		}	
		if (pSpi) {
			delete pSpi;
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    init
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_init
		(JNIEnv *, jobject) {
		if (pTraderApi) {
			pTraderApi->Init();
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    join
	 * Signature: ()I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_join
		(JNIEnv *, jobject) {
		if (pTraderApi) {
			return pTraderApi->Join();
		}
		else {
			return 0;
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    getTradingDay
	 * Signature: ()Ljava/lang/String;
	 */
	JNIEXPORT jstring JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_getTradingDay
		(JNIEnv *jenv, jobject jobj) {
		jstring tradingDay = NULL;
		if (pTraderApi) {
			tradingDay = jenv->NewStringUTF(pTraderApi->GetTradingDay());
		}
		return tradingDay;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    registerFront
	 * Signature: (Ljava/lang/String;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_registerFront
		(JNIEnv *jenv, jobject jobj, jstring frontAddress) {
		if (pTraderApi) {
			const char *pszFrontAddress;
			pszFrontAddress = jenv->GetStringUTFChars(frontAddress, NULL);
			pTraderApi->RegisterFront(const_cast<char*>(pszFrontAddress));
			jenv->ReleaseStringUTFChars(frontAddress, pszFrontAddress);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    registerNameServer
	 * Signature: (Ljava/lang/String;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_registerNameServer
		(JNIEnv *jenv, jobject jobj, jstring nsAddress) {
		if (pTraderApi) {
			const char *pszNsAddress;
			pszNsAddress = jenv->GetStringUTFChars(nsAddress, NULL);
			pTraderApi->RegisterNameServer(const_cast<char*>(pszNsAddress));
			jenv->ReleaseStringUTFChars(nsAddress, pszNsAddress);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    registerFensUserInfo
	 * Signature: (Lcn/yiwang/ctp/struct/CTPFensUserInfo;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_registerFensUserInfo
		(JNIEnv *jenv, jobject jobj, jobject jUserInfo) {
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jUserInfo);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID LoginMode_fid = jenv->GetFieldID(jcls, "LoginMode", "C");

			CThostFtdcFensUserInfoField fensUserInfo;
			memset(&fensUserInfo, 0, sizeof(fensUserInfo));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jUserInfo, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(fensUserInfo.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jUserInfo, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(fensUserInfo.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (LoginMode_fid != NULL) {
				fensUserInfo.LoginMode = jenv->GetIntField(jUserInfo, LoginMode_fid);
			}

			pTraderApi->RegisterFensUserInfo(&fensUserInfo);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    registerSpi
	 * Signature: (Lcn/yiwang/ctp/CThostFtdcTraderSpi;)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_registerSpi
		(JNIEnv *jenv, jobject jobj, jobject spi) {
		if (pTraderApi) {
			jenv->GetJavaVM(&trader_jvm);
			trader_obj = jenv->NewGlobalRef(spi);

			pSpi = new CtpTraderSpi(trader_jvm, trader_obj);
			pTraderApi->RegisterSpi(pSpi);
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    subscribePrivateTopic
	 * Signature: (I)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_subscribePrivateTopic
		(JNIEnv *jenv, jobject jobj, jint jResumeType) {
		if (pTraderApi) {
			if (jResumeType == 0)
			{
				pTraderApi->SubscribePrivateTopic(THOST_TERT_RESTART);
			}
			else if (jResumeType == 1) {
				pTraderApi->SubscribePrivateTopic(THOST_TERT_RESUME);
			}
			else if (jResumeType == 2) {
				pTraderApi->SubscribePrivateTopic(THOST_TERT_QUICK);
			}
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    rubscribePublicTopic
	 * Signature: (I)V
	 */
	JNIEXPORT void JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_subscribePublicTopic
		(JNIEnv *jenv, jobject jobj, jint jResumeType) {
		if (pTraderApi) {
			if (jResumeType == 0)
			{
				pTraderApi->SubscribePublicTopic(THOST_TERT_RESTART);
			}
			else if (jResumeType == 1) {
				pTraderApi->SubscribePublicTopic(THOST_TERT_RESUME);
			}
			else if (jResumeType == 2) {
				pTraderApi->SubscribePublicTopic(THOST_TERT_QUICK);
			}
		}
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqAuthenticate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPReqAuthenticate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqAuthenticate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    reqUserLogin
	 * Signature: (Lcn/yiwang/ctp/struct/CTPReqUserLogin;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqUserLogin
		(JNIEnv *jenv, jobject jobj, jobject jReqUserLogin, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jReqUserLogin);

			jfieldID TradingDay_fid = jenv->GetFieldID(jcls, "TradingDay", "Ljava/lang/String;");
			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID Password_fid = jenv->GetFieldID(jcls, "Password", "Ljava/lang/String;");
			jfieldID UserProductInfo_fid = jenv->GetFieldID(jcls, "UserProductInfo", "Ljava/lang/String;");
			jfieldID InterfaceProductInfo_fid = jenv->GetFieldID(jcls, "InterfaceProductInfo", "Ljava/lang/String;");
			jfieldID ProtocolInfo_fid = jenv->GetFieldID(jcls, "ProtocolInfo", "Ljava/lang/String;");
			jfieldID MacAddress_fid = jenv->GetFieldID(jcls, "MacAddress", "Ljava/lang/String;");
			jfieldID OneTimePassword_fid = jenv->GetFieldID(jcls, "OneTimePassword", "Ljava/lang/String;");
			jfieldID ClientIPAddress_fid = jenv->GetFieldID(jcls, "ClientIPAddress", "Ljava/lang/String;");


			CThostFtdcReqUserLoginField reqUserLogin;
			memset(&reqUserLogin, 0, sizeof(reqUserLogin));

			if (TradingDay_fid != NULL) {
				jstring TradingDay_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, TradingDay_fid);
				const char *TradingDay_chr = "";
				if (TradingDay_jstr != NULL) {
					TradingDay_chr = jenv->GetStringUTFChars(TradingDay_jstr, NULL);
					strcpy_s(reqUserLogin.TradingDay, TradingDay_chr);
					jenv->ReleaseStringUTFChars(TradingDay_jstr, TradingDay_chr);
				}
			}

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(reqUserLogin.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(reqUserLogin.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (Password_fid != NULL) {
				jstring Password_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, Password_fid);
				const char *Password_chr = "";
				if (Password_jstr != NULL) {
					Password_chr = jenv->GetStringUTFChars(Password_jstr, NULL);
					strcpy_s(reqUserLogin.Password, Password_chr);
					jenv->ReleaseStringUTFChars(Password_jstr, Password_chr);
				}
			}

			if (UserProductInfo_fid != NULL) {
				jstring UserProductInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, UserProductInfo_fid);
				const char *UserProductInfo_chr = "";
				if (UserProductInfo_jstr != NULL) {
					UserProductInfo_chr = jenv->GetStringUTFChars(UserProductInfo_jstr, NULL);
					strcpy_s(reqUserLogin.UserProductInfo, UserProductInfo_chr);
					jenv->ReleaseStringUTFChars(UserProductInfo_jstr, UserProductInfo_chr);
				}
			}

			if (InterfaceProductInfo_fid != NULL) {
				jstring InterfaceProductInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, InterfaceProductInfo_fid);
				const char *InterfaceProductInfo_chr = "";
				if (InterfaceProductInfo_jstr != NULL) {
					InterfaceProductInfo_chr = jenv->GetStringUTFChars(InterfaceProductInfo_jstr, NULL);
					strcpy_s(reqUserLogin.InterfaceProductInfo, InterfaceProductInfo_chr);
					jenv->ReleaseStringUTFChars(InterfaceProductInfo_jstr, InterfaceProductInfo_chr);
				}
			}

			if (ProtocolInfo_fid != NULL) {
				jstring ProtocolInfo_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, ProtocolInfo_fid);
				const char *ProtocolInfo_chr = "";
				if (ProtocolInfo_jstr != NULL) {
					ProtocolInfo_chr = jenv->GetStringUTFChars(ProtocolInfo_jstr, NULL);
					strcpy_s(reqUserLogin.ProtocolInfo, ProtocolInfo_chr);
					jenv->ReleaseStringUTFChars(ProtocolInfo_jstr, ProtocolInfo_chr);
				}
			}

			if (MacAddress_fid != NULL) {
				jstring MacAddress_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, MacAddress_fid);
				const char *MacAddress_chr = "";
				if (MacAddress_jstr != NULL) {
					MacAddress_chr = jenv->GetStringUTFChars(MacAddress_jstr, NULL);
					strcpy_s(reqUserLogin.MacAddress, MacAddress_chr);
					jenv->ReleaseStringUTFChars(MacAddress_jstr, MacAddress_chr);
				}
			}

			if (OneTimePassword_fid != NULL) {
				jstring OneTimePassword_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, OneTimePassword_fid);
				const char *OneTimePassword_chr = "";
				if (OneTimePassword_jstr != NULL) {
					OneTimePassword_chr = jenv->GetStringUTFChars(OneTimePassword_jstr, NULL);
					strcpy_s(reqUserLogin.OneTimePassword, OneTimePassword_chr);
					jenv->ReleaseStringUTFChars(OneTimePassword_jstr, OneTimePassword_chr);
				}
			}

			if (ClientIPAddress_fid != NULL) {
				jstring ClientIPAddress_jstr = (jstring)jenv->GetObjectField(jReqUserLogin, ClientIPAddress_fid);
				const char *ClientIPAddress_chr = "";
				if (ClientIPAddress_jstr != NULL) {
					ClientIPAddress_chr = jenv->GetStringUTFChars(ClientIPAddress_jstr, NULL);
					strcpy_s(reqUserLogin.ClientIPAddress, ClientIPAddress_chr);
					jenv->ReleaseStringUTFChars(ClientIPAddress_jstr, ClientIPAddress_chr);
				}
			}

			ret = pTraderApi->ReqUserLogin(&reqUserLogin, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    reqUserLogout
	 * Signature: (Lcn/yiwang/ctp/struct/CTPUserLogout;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqUserLogout
		(JNIEnv *jenv, jobject jobj, jobject jUserLogout, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jUserLogout);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");

			CThostFtdcUserLogoutField reqUserLogout;
			memset(&reqUserLogout, 0, sizeof(reqUserLogout));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jUserLogout, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(reqUserLogout.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jUserLogout, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(reqUserLogout.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			ret = pTraderApi->ReqUserLogout(&reqUserLogout, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqUserPasswordUpdate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPUserPasswordUpdate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqUserPasswordUpdate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqTradingAccountPasswordUpdate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPTradingAccountPasswordUpdate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqTradingAccountPasswordUpdate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqOrderInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqOrderInsert
		(JNIEnv *jenv, jobject jobj, jobject jInputOrder, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jInputOrder);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");
			jfieldID OrderRef_fid = jenv->GetFieldID(jcls, "OrderRef", "Ljava/lang/String;");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID OrderPriceType_fid = jenv->GetFieldID(jcls, "OrderPriceType", "C");
			jfieldID Direction_fid = jenv->GetFieldID(jcls, "Direction", "C");
			jfieldID CombOffsetFlag_fid = jenv->GetFieldID(jcls, "CombOffsetFlag", "Ljava/lang/String;");
			jfieldID CombHedgeFlag_fid = jenv->GetFieldID(jcls, "CombHedgeFlag", "Ljava/lang/String;");
			jfieldID LimitPrice_fid = jenv->GetFieldID(jcls, "LimitPrice", "F");
			jfieldID VolumeTotalOriginal_fid = jenv->GetFieldID(jcls, "VolumeTotalOriginal", "I");
			jfieldID TimeCondition_fid = jenv->GetFieldID(jcls, "TimeCondition", "C");
			jfieldID GTDDate_fid = jenv->GetFieldID(jcls, "GTDDate", "Ljava/lang/String;");
			jfieldID VolumeCondition_fid = jenv->GetFieldID(jcls, "VolumeCondition", "C");
			jfieldID MinVolume_fid = jenv->GetFieldID(jcls, "MinVolume", "I");
			jfieldID ContingentCondition_fid = jenv->GetFieldID(jcls, "ContingentCondition", "C");
			jfieldID StopPrice_fid = jenv->GetFieldID(jcls, "StopPrice", "F");
			jfieldID ForceCloseReason_fid = jenv->GetFieldID(jcls, "ForceCloseReason", "C");
			jfieldID IsAutoSuspend_fid = jenv->GetFieldID(jcls, "IsAutoSuspend", "I");
			jfieldID BusinessUnit_fid = jenv->GetFieldID(jcls, "BusinessUnit", "Ljava/lang/String;");
			jfieldID RequestID_fid = jenv->GetFieldID(jcls, "RequestID", "I");
			jfieldID UserForceClose_fid = jenv->GetFieldID(jcls, "UserForceClose", "I");
			jfieldID IsSwapOrder_fid = jenv->GetFieldID(jcls, "IsSwapOrder", "I");

			CThostFtdcInputOrderField pInputOrder;
			memset(&pInputOrder, 0, sizeof(pInputOrder));
			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jInputOrder, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(pInputOrder.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jInputOrder, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(pInputOrder.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}

			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jInputOrder, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(pInputOrder.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}

			if (OrderRef_fid != NULL) {
				jstring OrderRef_jstr = (jstring)jenv->GetObjectField(jInputOrder, OrderRef_fid);
				const char *OrderRef_chr = "";
				if (OrderRef_jstr != NULL) {
					OrderRef_chr = jenv->GetStringUTFChars(OrderRef_jstr, NULL);
					strcpy_s(pInputOrder.OrderRef, OrderRef_chr);
					jenv->ReleaseStringUTFChars(OrderRef_jstr, OrderRef_chr);
				}
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jInputOrder, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(pInputOrder.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (OrderPriceType_fid != NULL) {
				pInputOrder.OrderPriceType = jenv->GetCharField(jInputOrder, OrderPriceType_fid);
			}

			if (Direction_fid != NULL) {
				pInputOrder.Direction = jenv->GetCharField(jInputOrder, Direction_fid);
			}

			if (CombOffsetFlag_fid != NULL) {
				jstring CombOffsetFlag_jstr = (jstring)jenv->GetObjectField(jInputOrder, CombOffsetFlag_fid);
				const char *CombOffsetFlag_chr = "";
				if (CombOffsetFlag_jstr != NULL) {
					CombOffsetFlag_chr = jenv->GetStringUTFChars(CombOffsetFlag_jstr, NULL);
					strcpy_s(pInputOrder.CombOffsetFlag, CombOffsetFlag_chr);
					jenv->ReleaseStringUTFChars(CombOffsetFlag_jstr, CombOffsetFlag_chr);
				}
			}

			if (CombHedgeFlag_fid != NULL) {
				jstring CombHedgeFlag_jstr = (jstring)jenv->GetObjectField(jInputOrder, CombHedgeFlag_fid);
				const char *CombHedgeFlag_chr = "";
				if (CombHedgeFlag_jstr != NULL) {
					CombHedgeFlag_chr = jenv->GetStringUTFChars(CombHedgeFlag_jstr, NULL);
					strcpy_s(pInputOrder.CombHedgeFlag, CombHedgeFlag_chr);
					jenv->ReleaseStringUTFChars(CombHedgeFlag_jstr, CombHedgeFlag_chr);
				}
			}

			if (LimitPrice_fid != NULL) {
				pInputOrder.LimitPrice = jenv->GetFloatField(jInputOrder, LimitPrice_fid);
			}

			if (VolumeTotalOriginal_fid != NULL) {
				pInputOrder.VolumeTotalOriginal = jenv->GetIntField(jInputOrder, VolumeTotalOriginal_fid);
			}

			if (TimeCondition_fid != NULL) {
				pInputOrder.TimeCondition = jenv->GetCharField(jInputOrder, TimeCondition_fid);
			}

			if (GTDDate_fid != NULL) {
				jstring GTDDate_jstr = (jstring)jenv->GetObjectField(jInputOrder, GTDDate_fid);
				const char *GTDDate_chr = "";
				if (GTDDate_jstr != NULL) {
					GTDDate_chr = jenv->GetStringUTFChars(GTDDate_jstr, NULL);
					strcpy_s(pInputOrder.GTDDate, GTDDate_chr);
					jenv->ReleaseStringUTFChars(GTDDate_jstr, GTDDate_chr);
				}
			}

			if (VolumeCondition_fid != NULL) {
				pInputOrder.VolumeCondition = jenv->GetCharField(jInputOrder, VolumeCondition_fid);
			}

			if (MinVolume_fid != NULL) {
				pInputOrder.MinVolume = jenv->GetIntField(jInputOrder, MinVolume_fid);
			}

			if (ContingentCondition_fid != NULL) {
				pInputOrder.ContingentCondition = jenv->GetCharField(jInputOrder, ContingentCondition_fid);
			}

			if (StopPrice_fid != NULL) {
				pInputOrder.StopPrice = jenv->GetFloatField(jInputOrder, StopPrice_fid);
			}

			if (ForceCloseReason_fid != NULL) {
				pInputOrder.ForceCloseReason = jenv->GetCharField(jInputOrder, ForceCloseReason_fid);
			}

			if (IsAutoSuspend_fid != NULL) {
				pInputOrder.IsAutoSuspend = jenv->GetIntField(jInputOrder, IsAutoSuspend_fid);
			}

			if (BusinessUnit_fid != NULL) {
				jstring BusinessUnit_jstr = (jstring)jenv->GetObjectField(jInputOrder, BusinessUnit_fid);
				const char *BusinessUnit_chr = "";
				if (BusinessUnit_jstr != NULL) {
					BusinessUnit_chr = jenv->GetStringUTFChars(BusinessUnit_jstr, NULL);
					strcpy_s(pInputOrder.BusinessUnit, BusinessUnit_chr);
					jenv->ReleaseStringUTFChars(BusinessUnit_jstr, BusinessUnit_chr);
				}
			}

			if (RequestID_fid != NULL) {
				pInputOrder.RequestID = jenv->GetIntField(jInputOrder, RequestID_fid);
			}

			if (UserForceClose_fid != NULL) {
				pInputOrder.UserForceClose = jenv->GetIntField(jInputOrder, UserForceClose_fid);
			}

			if (IsSwapOrder_fid != NULL) {
				pInputOrder.IsSwapOrder = jenv->GetIntField(jInputOrder, IsSwapOrder_fid);
			}


			ret = pTraderApi->ReqOrderInsert(&pInputOrder, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqParkedOrderInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPParkedOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqParkedOrderInsert
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqParkedOrderAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPParkedOrderAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqParkedOrderAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqOrderAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputOrderAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqOrderAction
		(JNIEnv *jenv, jobject jobj, jobject jInputOrderAction, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jInputOrderAction);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID OrderActionRef_fid = jenv->GetFieldID(jcls, "OrderActionRef", "I");
			jfieldID OrderRef_fid = jenv->GetFieldID(jcls, "OrderRef", "Ljava/lang/String;");
			jfieldID RequestID_fid = jenv->GetFieldID(jcls, "RequestID", "I");
			jfieldID FrontID_fid = jenv->GetFieldID(jcls, "FrontID", "I");
			jfieldID SessionID_fid = jenv->GetFieldID(jcls, "SessionID", "I");
			jfieldID ExchangeID_fid = jenv->GetFieldID(jcls, "ExchangeID", "Ljava/lang/String;");
			jfieldID OrderSysID_fid = jenv->GetFieldID(jcls, "OrderSysID", "Ljava/lang/String;");
			jfieldID ActionFlag_fid = jenv->GetFieldID(jcls, "ActionFlag", "C");
			jfieldID LimitPrice_fid = jenv->GetFieldID(jcls, "LimitPrice", "F");
			jfieldID VolumeChange_fid = jenv->GetFieldID(jcls, "VolumeChange", "I");
			jfieldID UserID_fid = jenv->GetFieldID(jcls, "UserID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");

			CThostFtdcInputOrderActionField pInputOrderAction;
			memset(&pInputOrderAction, 0, sizeof(pInputOrderAction));
			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(pInputOrderAction.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(pInputOrderAction.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}

			if (OrderActionRef_fid != NULL) {
				pInputOrderAction.OrderActionRef = jenv->GetIntField(jInputOrderAction, OrderActionRef_fid);
			}

			if (OrderRef_fid != NULL) {
				jstring OrderRef_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, OrderRef_fid);
				const char *OrderRef_chr = "";
				if (OrderRef_jstr != NULL) {
					OrderRef_chr = jenv->GetStringUTFChars(OrderRef_jstr, NULL);
					strcpy_s(pInputOrderAction.OrderRef, OrderRef_chr);
					jenv->ReleaseStringUTFChars(OrderRef_jstr, OrderRef_chr);
				}
			}

			if (RequestID_fid != NULL) {
				pInputOrderAction.RequestID = jenv->GetIntField(jInputOrderAction, RequestID_fid);
			}

			if (FrontID_fid != NULL) {
				pInputOrderAction.FrontID = jenv->GetIntField(jInputOrderAction, FrontID_fid);
			}

			if (SessionID_fid != NULL) {
				pInputOrderAction.SessionID = jenv->GetIntField(jInputOrderAction, SessionID_fid);
			}

			if (ExchangeID_fid != NULL) {
				jstring ExchangeID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, ExchangeID_fid);
				const char *ExchangeID_chr = "";
				if (ExchangeID_jstr != NULL) {
					ExchangeID_chr = jenv->GetStringUTFChars(ExchangeID_jstr, NULL);
					strcpy_s(pInputOrderAction.ExchangeID, ExchangeID_chr);
					jenv->ReleaseStringUTFChars(ExchangeID_jstr, ExchangeID_chr);
				}
			}

			if (OrderSysID_fid != NULL) {
				jstring OrderSysID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, OrderSysID_fid);
				const char *OrderSysID_chr = "";
				if (OrderSysID_jstr != NULL) {
					OrderSysID_chr = jenv->GetStringUTFChars(OrderSysID_jstr, NULL);
					strcpy_s(pInputOrderAction.OrderSysID, OrderSysID_chr);
					jenv->ReleaseStringUTFChars(OrderSysID_jstr, OrderSysID_chr);
				}
			}

			if (ActionFlag_fid != NULL) {
				pInputOrderAction.ActionFlag = jenv->GetCharField(jInputOrderAction, ActionFlag_fid);
			}

			if (LimitPrice_fid != NULL) {
				pInputOrderAction.LimitPrice = jenv->GetFloatField(jInputOrderAction, LimitPrice_fid);
			}

			if (VolumeChange_fid != NULL) {
				pInputOrderAction.VolumeChange = jenv->GetIntField(jInputOrderAction, VolumeChange_fid);
			}

			if (UserID_fid != NULL) {
				jstring UserID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, UserID_fid);
				const char *UserID_chr = "";
				if (UserID_jstr != NULL) {
					UserID_chr = jenv->GetStringUTFChars(UserID_jstr, NULL);
					strcpy_s(pInputOrderAction.UserID, UserID_chr);
					jenv->ReleaseStringUTFChars(UserID_jstr, UserID_chr);
				}
			}

			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jInputOrderAction, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(pInputOrderAction.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}


			ret = pTraderApi->ReqOrderAction(&pInputOrderAction, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQueryMaxOrderVolume
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQueryMaxOrderVolume;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQueryMaxOrderVolume
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqSettlementInfoConfirm
	 * Signature: (Lcn/yiwang/ctp/struct/CTPSettlementInfoConfirm;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqSettlementInfoConfirm
		(JNIEnv *jenv, jobject jobj, jobject jSettlementInfoConfirm, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jSettlementInfoConfirm);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID ConfirmDate_fid = jenv->GetFieldID(jcls, "ConfirmDate", "Ljava/lang/String;");
			jfieldID ConfirmTime_fid = jenv->GetFieldID(jcls, "ConfirmTime", "Ljava/lang/String;");

			CThostFtdcSettlementInfoConfirmField settlementInfoConfirm;
			memset(&settlementInfoConfirm, 0, sizeof(settlementInfoConfirm));
			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jSettlementInfoConfirm, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(settlementInfoConfirm.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jSettlementInfoConfirm, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(settlementInfoConfirm.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}

			if (ConfirmDate_fid != NULL) {
				jstring ConfirmDate_jstr = (jstring)jenv->GetObjectField(jSettlementInfoConfirm, ConfirmDate_fid);
				const char *ConfirmDate_chr = "";
				if (ConfirmDate_jstr != NULL) {
					ConfirmDate_chr = jenv->GetStringUTFChars(ConfirmDate_jstr, NULL);
					strcpy_s(settlementInfoConfirm.ConfirmDate, ConfirmDate_chr);
					jenv->ReleaseStringUTFChars(ConfirmDate_jstr, ConfirmDate_chr);
				}
			}

			if (ConfirmTime_fid != NULL) {
				jstring ConfirmTime_jstr = (jstring)jenv->GetObjectField(jSettlementInfoConfirm, ConfirmTime_fid);
				const char *ConfirmTime_chr = "";
				if (ConfirmTime_jstr != NULL) {
					ConfirmTime_chr = jenv->GetStringUTFChars(ConfirmTime_jstr, NULL);
					strcpy_s(settlementInfoConfirm.ConfirmTime, ConfirmTime_chr);
					jenv->ReleaseStringUTFChars(ConfirmTime_jstr, ConfirmTime_chr);
				}
			}

			ret = pTraderApi->ReqSettlementInfoConfirm(&settlementInfoConfirm, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqRemoveParkedOrder
	 * Signature: (Lcn/yiwang/ctp/struct/CTPRemoveParkedOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqRemoveParkedOrder
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqRemoveParkedOrderAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPRemoveParkedOrderAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqRemoveParkedOrderAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqExecOrderInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputExecOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqExecOrderInsert
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqExecOrderAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputExecOrderAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqExecOrderAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqForQuoteInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputForQuote;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqForQuoteInsert
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQuoteInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputQuote;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQuoteInsert
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQuoteAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputQuoteAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQuoteAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqCombActionInsert
	 * Signature: (Lcn/yiwang/ctp/struct/CTPInputCombAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqCombActionInsert
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryOrder
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryOrder
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTrade
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTrade;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryTrade
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInvestorPosition
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInvestorPosition;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryInvestorPosition
		(JNIEnv *jenv, jobject jobj, jobject jQryInvestorPosition, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryInvestorPosition);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");

			CThostFtdcQryInvestorPositionField qryInvestorPosition;
			memset(&qryInvestorPosition, 0, sizeof(qryInvestorPosition));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPosition, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qryInvestorPosition.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPosition, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qryInvestorPosition.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPosition, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(qryInvestorPosition.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}

			ret = pTraderApi->ReqQryInvestorPosition(&qryInvestorPosition, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTradingAccount
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTradingAccount;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryTradingAccount
		(JNIEnv *jenv, jobject jobj, jobject jQryTradingAccount, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryTradingAccount);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID CurrencyID_fid = jenv->GetFieldID(jcls, "CurrencyID", "Ljava/lang/String;");

			CThostFtdcQryTradingAccountField qryTradingAccount;
			memset(&qryTradingAccount, 0, sizeof(qryTradingAccount));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQryTradingAccount, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qryTradingAccount.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQryTradingAccount, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qryTradingAccount.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (CurrencyID_fid != NULL) {
				jstring CurrencyID_jstr = (jstring)jenv->GetObjectField(jQryTradingAccount, CurrencyID_fid);
				const char *CurrencyID_chr = "";
				if (CurrencyID_jstr != NULL) {
					CurrencyID_chr = jenv->GetStringUTFChars(CurrencyID_jstr, NULL);
					strcpy_s(qryTradingAccount.CurrencyID, CurrencyID_chr);
					jenv->ReleaseStringUTFChars(CurrencyID_jstr, CurrencyID_chr);
				}
			}

			ret = pTraderApi->ReqQryTradingAccount(&qryTradingAccount, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInvestor
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInvestor;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryInvestor
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTradingCode
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTradingCode;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryTradingCode
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInstrumentMarginRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInstrumentMarginRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryInstrumentMarginRate
		(JNIEnv *jenv, jobject jobj, jobject jQryInstrumentMarginRate, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryInstrumentMarginRate);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");
			jfieldID HedgeFlag_fid = jenv->GetFieldID(jcls, "HedgeFlag", "C");

			CThostFtdcQryInstrumentMarginRateField qryInstrumentMarginRate;
			memset(&qryInstrumentMarginRate, 0, sizeof(qryInstrumentMarginRate));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentMarginRate, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qryInstrumentMarginRate.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentMarginRate, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qryInstrumentMarginRate.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentMarginRate, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(qryInstrumentMarginRate.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}
			if (HedgeFlag_fid != NULL) {
				qryInstrumentMarginRate.HedgeFlag = jenv->GetCharField(jQryInstrumentMarginRate, HedgeFlag_fid);
			}

			ret = pTraderApi->ReqQryInstrumentMarginRate(&qryInstrumentMarginRate, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInstrumentCommissionRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInstrumentCommissionRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryInstrumentCommissionRate
		(JNIEnv *jenv, jobject jobj, jobject jQryInstrumentCommissionRate, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryInstrumentCommissionRate);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");

			CThostFtdcQryInstrumentCommissionRateField qryInstrumentCommissionRate;
			memset(&qryInstrumentCommissionRate, 0, sizeof(qryInstrumentCommissionRate));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentCommissionRate, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qryInstrumentCommissionRate.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentCommissionRate, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qryInstrumentCommissionRate.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jQryInstrumentCommissionRate, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(qryInstrumentCommissionRate.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}

			ret = pTraderApi->ReqQryInstrumentCommissionRate(&qryInstrumentCommissionRate, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    reqQryExchange
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryExchange;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryExchange
		(JNIEnv *jenv, jobject jobj, jobject jQryExchange, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryExchange);

			jfieldID ExchangeID_fid = jenv->GetFieldID(jcls, "ExchangeID", "Ljava/lang/String;");

			CThostFtdcQryExchangeField qryExchange;
			memset(&qryExchange, 0, sizeof(qryExchange));

			if (ExchangeID_fid != NULL) {
				jstring ExchangeID_jstr = (jstring)jenv->GetObjectField(jQryExchange, ExchangeID_fid);
				const char *ExchangeID_chr = "";
				if (ExchangeID_jstr != NULL) {
					ExchangeID_chr = jenv->GetStringUTFChars(ExchangeID_jstr, NULL);
					strcpy_s(qryExchange.ExchangeID, ExchangeID_chr);
					jenv->ReleaseStringUTFChars(ExchangeID_jstr, ExchangeID_chr);
				}
			}

			ret = pTraderApi->ReqQryExchange(&qryExchange, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryProduct
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryProduct;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryProduct
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    reqQryInstrument
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInstrument;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryInstrument
		(JNIEnv *jenv, jobject jobj, jobject jQryInstrument, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryInstrument);

			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");
			jfieldID ExchangeID_fid = jenv->GetFieldID(jcls, "ExchangeID", "Ljava/lang/String;");
			jfieldID ExchangeInstID_fid = jenv->GetFieldID(jcls, "ExchangeInstID", "Ljava/lang/String;");
			jfieldID ProductID_fid = jenv->GetFieldID(jcls, "ProductID", "Ljava/lang/String;");

			CThostFtdcQryInstrumentField qryInstrument;
			memset(&qryInstrument, 0, sizeof(qryInstrument));

			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jQryInstrument, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(qryInstrument.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}

			if (ExchangeID_fid != NULL) {
				jstring ExchangeID_jstr = (jstring)jenv->GetObjectField(jQryInstrument, ExchangeID_fid);
				const char *ExchangeID_chr = "";
				if (ExchangeID_jstr != NULL) {
					ExchangeID_chr = jenv->GetStringUTFChars(ExchangeID_jstr, NULL);
					strcpy_s(qryInstrument.ExchangeID, ExchangeID_chr);
					jenv->ReleaseStringUTFChars(ExchangeID_jstr, ExchangeID_chr);
				}
			}

			if (ExchangeInstID_fid != NULL) {
				jstring ExchangeInstID_jstr = (jstring)jenv->GetObjectField(jQryInstrument, ExchangeInstID_fid);
				const char *ExchangeInstID_chr = "";
				if (ExchangeInstID_jstr != NULL) {
					ExchangeInstID_chr = jenv->GetStringUTFChars(ExchangeInstID_jstr, NULL);
					strcpy_s(qryInstrument.ExchangeInstID, ExchangeInstID_chr);
					jenv->ReleaseStringUTFChars(ExchangeInstID_jstr, ExchangeInstID_chr);
				}
			}

			if (ProductID_fid != NULL) {
				jstring ProductID_jstr = (jstring)jenv->GetObjectField(jQryInstrument, ProductID_fid);
				const char *ProductID_chr = "";
				if (ProductID_jstr != NULL) {
					ProductID_chr = jenv->GetStringUTFChars(ProductID_jstr, NULL);
					strcpy_s(qryInstrument.ProductID, ProductID_chr);
					jenv->ReleaseStringUTFChars(ProductID_jstr, ProductID_chr);
				}
			}

			ret = pTraderApi->ReqQryInstrument(&qryInstrument, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryDepthMarketData
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryDepthMarketData;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryDepthMarketData
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQrySettlementInfo
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQrySettlementInfo;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQrySettlementInfo
		(JNIEnv *jenv, jobject jobj, jobject jQrySettlementInfo, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQrySettlementInfo);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID TradingDay_fid = jenv->GetFieldID(jcls, "TradingDay", "Ljava/lang/String;");

			CThostFtdcQrySettlementInfoField qrySettlementInfo;
			memset(&qrySettlementInfo, 0, sizeof(qrySettlementInfo));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQrySettlementInfo, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qrySettlementInfo.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQrySettlementInfo, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qrySettlementInfo.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (TradingDay_fid != NULL) {
				jstring TradingDay_jstr = (jstring)jenv->GetObjectField(jQrySettlementInfo, TradingDay_fid);
				const char *TradingDay_chr = "";
				if (TradingDay_jstr != NULL) {
					TradingDay_chr = jenv->GetStringUTFChars(TradingDay_jstr, NULL);
					strcpy_s(qrySettlementInfo.TradingDay, TradingDay_chr);
					jenv->ReleaseStringUTFChars(TradingDay_jstr, TradingDay_chr);
				}
			}

			ret = pTraderApi->ReqQrySettlementInfo(&qrySettlementInfo, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTransferBank
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTransferBank;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryTransferBank
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInvestorPositionDetail
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInvestorPositionDetail;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQryInvestorPositionDetail
		(JNIEnv *jenv, jobject jobj, jobject jQryInvestorPositionDetail, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQryInvestorPositionDetail);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");
			jfieldID InstrumentID_fid = jenv->GetFieldID(jcls, "InstrumentID", "Ljava/lang/String;");

			CThostFtdcQryInvestorPositionDetailField qryInvestorPositionDetail;
			memset(&qryInvestorPositionDetail, 0, sizeof(qryInvestorPositionDetail));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPositionDetail, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qryInvestorPositionDetail.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}
			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPositionDetail, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qryInvestorPositionDetail.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}
			if (InstrumentID_fid != NULL) {
				jstring InstrumentID_jstr = (jstring)jenv->GetObjectField(jQryInvestorPositionDetail, InstrumentID_fid);
				const char *InstrumentID_chr = "";
				if (InstrumentID_jstr != NULL) {
					InstrumentID_chr = jenv->GetStringUTFChars(InstrumentID_jstr, NULL);
					strcpy_s(qryInvestorPositionDetail.InstrumentID, InstrumentID_chr);
					jenv->ReleaseStringUTFChars(InstrumentID_jstr, InstrumentID_chr);
				}
			}
			ret = pTraderApi->ReqQryInvestorPositionDetail(&qryInvestorPositionDetail, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryNotice
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryNotice;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryNotice
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQrySettlementInfoConfirm
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQrySettlementInfoConfirm;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_reqQrySettlementInfoConfirm
		(JNIEnv *jenv, jobject jobj, jobject jQrySettlementInfoConfirm, jint jRequestID) {
		int ret = 0;
		if (pTraderApi) {
			jclass jcls = jenv->GetObjectClass(jQrySettlementInfoConfirm);

			jfieldID BrokerID_fid = jenv->GetFieldID(jcls, "BrokerID", "Ljava/lang/String;");
			jfieldID InvestorID_fid = jenv->GetFieldID(jcls, "InvestorID", "Ljava/lang/String;");

			CThostFtdcQrySettlementInfoConfirmField qrySettlementInfoConfir;
			memset(&qrySettlementInfoConfir, 0, sizeof(qrySettlementInfoConfir));

			if (BrokerID_fid != NULL) {
				jstring BrokerID_jstr = (jstring)jenv->GetObjectField(jQrySettlementInfoConfirm, BrokerID_fid);
				const char *BrokerID_chr = "";
				if (BrokerID_jstr != NULL) {
					BrokerID_chr = jenv->GetStringUTFChars(BrokerID_jstr, NULL);
					strcpy_s(qrySettlementInfoConfir.BrokerID, BrokerID_chr);
					jenv->ReleaseStringUTFChars(BrokerID_jstr, BrokerID_chr);
				}
			}

			if (InvestorID_fid != NULL) {
				jstring InvestorID_jstr = (jstring)jenv->GetObjectField(jQrySettlementInfoConfirm, InvestorID_fid);
				const char *InvestorID_chr = "";
				if (InvestorID_jstr != NULL) {
					InvestorID_chr = jenv->GetStringUTFChars(InvestorID_jstr, NULL);
					strcpy_s(qrySettlementInfoConfir.InvestorID, InvestorID_chr);
					jenv->ReleaseStringUTFChars(InvestorID_jstr, InvestorID_chr);
				}
			}

			ret = pTraderApi->ReqQrySettlementInfoConfirm(&qrySettlementInfoConfir, jRequestID);
		}
		else {
			ret = -4;
		}
		return ret;
	}

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInvestorPositionCombineDetail
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInvestorPositionCombineDetail;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryInvestorPositionCombineDetail
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryCFMMCTradingAccountKey
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryCFMMCTradingAccountKey;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryCFMMCTradingAccountKey
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryEWarrantOffset
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryEWarrantOffset;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryEWarrantOffset
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryInvestorProductGroupMargin
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryInvestorProductGroupMargin;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryInvestorProductGroupMargin
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryExchangeMarginRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryExchangeMarginRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryExchangeMarginRate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryExchangeMarginRateAdjust
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryExchangeMarginRateAdjust;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryExchangeMarginRateAdjust
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryExchangeRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryExchangeRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryExchangeRate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQrySecAgentACIDMap
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQrySecAgentACIDMap;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQrySecAgentACIDMap
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryProductExchRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryProductExchRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryProductExchRate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryOptionInstrTradeCost
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryOptionInstrTradeCost;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryOptionInstrTradeCost
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryOptionInstrCommRate
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryOptionInstrCommRate;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryOptionInstrCommRate
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryExecOrder
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryExecOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryExecOrder
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryForQuote
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryForQuote;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryForQuote
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryQuote
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryQuote;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryQuote
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryCombInstrumentGuard
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryCombInstrumentGuard;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryCombInstrumentGuard
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryCombAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryCombAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryCombAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTransferSerial
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTransferSerial;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryTransferSerial
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryAccountregister
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryAccountregister;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryAccountregister
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryContractBank
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryContractBank;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryContractBank
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryParkedOrder
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryParkedOrder;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryParkedOrder
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryParkedOrderAction
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryParkedOrderAction;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryParkedOrderAction
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryTradingNotice
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryTradingNotice;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryTradingNotice
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryBrokerTradingParams
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryBrokerTradingParams;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryBrokerTradingParams
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQryBrokerTradingAlgos
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQryBrokerTradingAlgos;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQryBrokerTradingAlgos
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQueryCFMMCTradingAccountToken
	 * Signature: (Lcn/yiwang/ctp/struct/CTPQueryCFMMCTradingAccountToken;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQueryCFMMCTradingAccountToken
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqFromBankToFutureByFuture
	 * Signature: (Lcn/yiwang/ctp/struct/CTPReqTransfer;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqFromBankToFutureByFuture
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqFromFutureToBankByFuture
	 * Signature: (Lcn/yiwang/ctp/struct/CTPReqTransfer;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqFromFutureToBankByFuture
		(JNIEnv *, jobject, jobject, jint);

	/*
	 * Class:     cn_yiwang_ctp_CThostFtdcTraderApi
	 * Method:    ReqQueryBankAccountMoneyByFuture
	 * Signature: (Lcn/yiwang/ctp/struct/CTPReqQueryAccount;I)I
	 */
	JNIEXPORT jint JNICALL Java_cn_yiwang_ctp_CThostFtdcTraderApi_ReqQueryBankAccountMoneyByFuture
		(JNIEnv *, jobject, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
